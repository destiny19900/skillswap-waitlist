rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Waitlist collection with proper validation
    match /waitlist/{document} {
      // Allow reading waitlist entries only from server-side (using admin SDK)
      // Client-side reads are denied for privacy/security
      allow read: if false;
      
      // Allow creating new entries with validation
      allow create: if 
        // Required fields validation
        request.resource.data.name is string &&
        request.resource.data.email is string &&
        
        // Email format validation with regex
        request.resource.data.email.matches('^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$') &&
        
        // Name length validation
        request.resource.data.name.size() >= 2 &&
        
        // Skills validation
        (
          (!('learningSkills' in request.resource.data) || request.resource.data.learningSkills is list) &&
          (!('teachingSkills' in request.resource.data) || request.resource.data.teachingSkills is list)
        ) &&
        
        // Prevent spam submissions
        (!exists(/databases/$(database)/documents/waitlist/$(request.resource.id)));
      
      // No client-side updates allowed
      allow update: if false;
      
      // No client-side deletions allowed
      allow delete: if false;
    }
    
    // Contact form submissions
    match /contacts/{document} {
      // Only allow creation with validation
      allow create: if 
        // Required fields validation
        request.resource.data.name is string &&
        request.resource.data.email is string &&
        request.resource.data.message is string &&
        
        // Email format validation
        request.resource.data.email.matches('^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$') &&
        
        // Length validations to prevent spam
        request.resource.data.name.size() >= 2 &&
        request.resource.data.message.size() >= 10 &&
        request.resource.data.message.size() <= 5000;
      
      // No read, update or delete allowed from client
      allow read, update, delete: if false;
    }
    
    // Default: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 